<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>穷皮涛宝典</title>
  
  <subtitle>不知名互联网公司的不知名工程师</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zhangtaoy.cn/"/>
  <updated>2019-08-06T11:05:34.684Z</updated>
  <id>https://zhangtaoy.cn/</id>
  
  <author>
    <name>zhangtao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>拼多多产品体验报告</title>
    <link href="https://zhangtaoy.cn/2019/%E6%8B%BC%E5%A4%9A%E5%A4%9A%E4%BA%A7%E5%93%81%E4%BD%93%E9%AA%8C%E6%8A%A5%E5%91%8A/"/>
    <id>https://zhangtaoy.cn/2019/拼多多产品体验报告/</id>
    <published>2019-08-01T03:37:32.179Z</published>
    <updated>2019-08-06T11:05:34.684Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Aug 06 2019 19:05:40 GMT+0800 (中国标准时间) --><p>拼多多是一款电商购物APP，它以社交为基础，能为用户提供价格优惠的购物体验。拼多多在2015年开始运营，2018年在美国上市，目前用户数量过亿。</p><a id="more"></a><h1 id="拼多多产品体验报告"><a href="#拼多多产品体验报告" class="headerlink" title="拼多多产品体验报告"></a><strong>拼多多产品体验报告</strong></h1><h2 id="一-基本概述"><a href="#一-基本概述" class="headerlink" title="一. 基本概述"></a>一. 基本概述</h2><h3 id="1-拼多多简介"><a href="#1-拼多多简介" class="headerlink" title="1. 拼多多简介"></a>1. 拼多多简介</h3><p>拼多多是一款电商购物APP，它以社交为基础，能为用户提供价格优惠的购物体验。拼多多在2015年开始运营，2018年在美国上市，目前用户数量过亿。</p><h3 id="2-拼多多实现的需求"><a href="#2-拼多多实现的需求" class="headerlink" title="2. 拼多多实现的需求"></a>2. 拼多多实现的需求</h3><p>拼多多帮助用户实现了一站购买高性价比商品的需求。它通过拼单与分享优惠券等方式，帮助用户及用户的亲朋好友等一起获得廉价的商品，并用游戏、现金补贴的方式帮助用户持续享受优惠购物。</p><h3 id="3-目标用户及使用场景"><a href="#3-目标用户及使用场景" class="headerlink" title="3. 目标用户及使用场景"></a>3. 目标用户及使用场景</h3><ul><li><p>目标用户一：三四五线城市以及农村居民，在知道网上购物方便之后，希望能在网上找到价格便宜的东西。<br>典型使用场景：小红的爸爸是一个生活在河南农村老家的中年人。小红爸爸在村里人那里听到现在用手机上网就可以卖东西，就拿着小红送给的智能手机让村里人教教他。就这样，小红爸爸知道了拼多多，还学会了和邻居拼单买水果和家用物品。</p></li><li><p>目标用户二：生活比较悠闲，不缺时间，平时购物时喜欢货比三家，推崇性价比高的商品或便宜商品的人。<br>典型使用场景：小明的妈妈是一位家庭主妇，非常喜欢购物逛街卖东西。今天家里的洗发水和洗衣粉用完了，于是她打开拼多多搜索有没有便宜好用的商品。</p></li><li><p>目标用户三：生活闲暇时间喜欢刷手机，收入水平一般，喜欢购物和淘好货但又不舍得花钱的人。<br>典型使用场景：小丹下班回家以后感觉非常累，工资还没发下来又忍不住想买东西。于是为了释放压力，她打开拼多多看看有没有好东西可以入手。</p></li></ul><h2 id="二-产品功能分析"><a href="#二-产品功能分析" class="headerlink" title="二. 产品功能分析"></a>二. 产品功能分析</h2><h3 id="1-产品逻辑拆解"><a href="#1-产品逻辑拆解" class="headerlink" title="1. 产品逻辑拆解"></a>1. 产品逻辑拆解</h3><p><img src="https://b2.bmp.ovh/imgs/2019/08/2a5d8079f444d87a.png" alt="pingduoduo_01"><br>图1. 拼多多业务流程图<br><img src="https://b2.bmp.ovh/imgs/2019/08/38f09913d111ee67.png" alt="pingduoduo_02"><br>图2. 拼多多的功能点<br>为了更好的梳理拼多多的业务逻辑和功能点，我用流程图数理了产品的逻辑，用思维导图梳理了产品的主要功能点。拼多多依靠强大的补贴，来刺激用户购买商品。补贴可以通过购物、游戏的方式得到，得到的优惠券又再次用到购物中。同时，用户在游戏或享受优惠时，不断分享邀请新人，可以形成良好的循环，不断获得新用户。</p><h3 id="2-产品基础功能体验"><a href="#2-产品基础功能体验" class="headerlink" title="2. 产品基础功能体验"></a>2. 产品基础功能体验</h3><h4 id="2-1-搜索功能"><a href="#2-1-搜索功能" class="headerlink" title="2.1 搜索功能"></a>2.1 搜索功能</h4><ul><li>功能作用：在用户希望找到某种特定的商品或某类商品时，可以使用搜索功能。</li><li>功能使用方法：拼多多有专门的搜索页面，用于商城的商品搜索，同时在“我的收藏”里也有搜索功能，可以找到用户曾经收藏的商品。</li><li>特殊情况测试：</li></ul><ol><li>在搜索页面里搜索“衣服”，这是测试模糊搜索某种大类的商品，一直往下滑发现还是有底部的，数量大概在400-500之间。</li><li>在搜索页面里搜索洗发水品牌“ogx”，这是为了测试搜索结果是否精确。搜索后发现结果里基本都是该品牌的洗发水，但是会带有其他品牌的洗发水，且多次搜索后所有商品的排列顺序会随机变化。另外，如果商品名里只带有“g”也会展示，比如：LG洗发水，XXX品牌洗发水300g等。</li><li>在经过搜索测试之后，观察搜索页面里的推荐标签，发现软件会读取输入法的信息或关联软件中其他的搜索信息。比如之前在“我的收藏”里搜索过“瓜”，在搜索推荐里就会出现“切瓜器”等相似产品。</li></ol><ul><li>思考：在这里第一次仔细观察了一下搜索推荐的标签和搜索内容。在搜索“衣服”过程中，我发现拼多多没有像淘宝一样在搜索结果中推荐用户增加搜索标签，如“修身”、“上班族”等。这里是否反应了拼多多的用户并不经常使用精确搜索，“逛商品”的行为更多？</li></ul><h4 id="2-2-选择商品数量及型号"><a href="#2-2-选择商品数量及型号" class="headerlink" title="2.2 选择商品数量及型号"></a>2.2 选择商品数量及型号</h4><ul><li>功能作用：用户在购买商品时，可以选择购买商品数量和型号，让购买的产品更贴合自己的需求。</li><li>功能使用方法：在点击“发起拼单”或“单独购买”等购买按钮后，可以看到商家提供的商品型号种类，再往下滑就可以看到数量选择，数量选择可以使用手动输入或点击“+”、“-”。</li><li>特殊情况测试：</li></ul><ol><li>在购买时，没有选择好商品型号，APP会提示请选择对应型号，数量是默认1，不能到0。</li><li>在数量输入里，尝试输入“3200000000000”等长串数字，有部分商品界面会弹出提示“该商品最大购买数量为99999999”，有部分商品界面会自动将数量缩小，比如缩小至“1000”，这里还没有测试出来是什么样的商品会自动缩小商品数量；</li></ol><ul><li>思考：这部分的测试是第一次测试，在其他APP上从来没有试过，终于知道了原来在这样的地方也存在着这样细节的控制，以后可以测试其他类似产品的控制。</li></ul><h4 id="2-3-商品购买功能"><a href="#2-3-商品购买功能" class="headerlink" title="2.3 商品购买功能"></a>2.3 商品购买功能</h4><p>购买产品可以有3种方式，单独购买、拼单、插队拼单。</p><ul><li>功能作用：让用户能够购买产品。该功能在每个商品详情展示页面的底部，可自行选择。</li><li>功能使用方法：<br>单独购买：如果不想拼团或着急购买，可以直接点击这个按钮，能够迅速成功下单，成功后提示自己就是拼主。<br>拼单：可以自己发起拼单，或参与其他用户的拼单。每个商品详情页面会显示10个其他拼主，参与任何一个即可成功下单。<br>插队拼单：该功能只在部分商品中显示。拼多多客服解释，插队拼单是在随机商品中显示这个功能，意思是加入已经拼单成功的队伍中，从体验看与普通的加入拼单没有差别。</li><li>特殊情况测试：</li></ul><ol><li>在与其他用户一同拼单后立即申请退货，退货能够被允许并处理。</li><li>自己发起拼单后，在还没有其他用户参与拼单时发起退货，系统提示暂不能退货，24小时后若拼单不成功则自动退款。</li></ol><ul><li>思考：对上述无法退货的提示，我认为可能是基于系统复杂度和产品体验方面的考虑。假设可以退货，那么如果此时正好有其他用户进入拼单，系统需要多加几层判断，不仅容易出现Bug，还可能影响多个人的交易体验，增加系统和客服的负担。</li></ul><h4 id="2-4-支付功能"><a href="#2-4-支付功能" class="headerlink" title="2.4 支付功能"></a>2.4 支付功能</h4><ul><li>功能作用：在用户确认购买的产品之后，需要点击选择支付方式、确认金额、数量、收货地址，来完成一笔交易订单。</li><li>功能使用方法：在商品的数量和型号都选择好了以后，点击确认即可来到支付界面。</li><li>特殊情况测试：</li></ul><ol><li>在支付界面里修改购买商品数量，1是最小的数量，随意输入“99999999”，界面提示单笔订单成交金额不能大于9.5万元，使用其他支付渠道也是一样的结果，如支付宝、找他人代付。</li><li>在支付界面里删除已有的收货地址并点击确认支付，界面会有增加收货地址的弹窗，手动输入即可，这里没有做跳转页面，对客户来说更简洁清爽了。</li></ol><ul><li>思考：测试发现拼多多单笔订单不能超过9.5万元时，我自己百度搜索了微信支付渠道的每日交易限额，搜索发现每个银行卡都不一样，根据各银行的规定，有些每日单笔限额最高可以达到10万元。这个功能的设置有助于客户避免异常交易，也节省了客户的时间，不需要客户在交易超过最高金额后打电话去问银行或问拼多多客服为什么交易失败。</li></ul><h4 id="2-5-商品及店铺收藏功能"><a href="#2-5-商品及店铺收藏功能" class="headerlink" title="2.5 商品及店铺收藏功能"></a>2.5 商品及店铺收藏功能</h4><ul><li>功能作用：帮助用户记录自己喜欢的物品和店铺，便于后续购买。</li><li>功能使用方法：</li></ul><ol><li>商品收藏：在商品详情页的底部可以找到，点击收藏后可在收藏夹找到该商品。</li><li>店铺收藏：进入店铺后，在店铺首页上方点击收藏可收藏店铺。</li><li>查看收藏的店铺和商品：前往个人中心的商品收藏或店铺收藏。</li></ol><ul><li>特殊情况测试：</li></ul><ol><li>拼多多无法批量管理收藏的商品，只能在每个卡片里的更多选项中找到删除，一个一个的删除，只能对所有收藏商品进行合计支付。</li><li>最大收藏商品数量：暂未测试出</li></ol><ul><li>思考：目前没有想到能解释拼多多没有批量管理收藏夹商品功能的说法。能想到的是可能是用户使用的不多，所以后来的版本也就不需要迭代该功能了。另外，我认为拼多多上的商品价格差异不大，用户也不需要收藏之后等待降价，所以拼多多在收藏夹页面里做了合计支付来引导用户进行购买。</li></ul><h4 id="2-6-找相似商品"><a href="#2-6-找相似商品" class="headerlink" title="2.6 找相似商品"></a>2.6 找相似商品</h4><ul><li>功能作用：在用户希望购买某商品时，查找相似商品的功能便于用户货比三家，找到性价比高的商品。</li><li>功能使用方法：在拼多多里有两个快速找到相似商品的方法。</li></ul><ol><li>进入某一商品的详情页，滑倒底部就可以看到其他相似商品。</li><li>进入推荐页面，该页面的每个商品标签中都有发现按钮，点击发现可以看到相似商品的列表。</li></ol><ul><li>特殊情况测试：</li></ul><p>通过这两种方式进入查找相似商品，一直滑倒没有更多商品。第一种进入商品详情页的查看的方式能够找到62个商品，展示数量固定但内容随机变化，第二种会在页面中展示共有多少种商品，每个商品的相似品内容是固定的。</p><ul><li>思考：这两种方法的相似品展示数量都不是很多，应该是引导用户尽快浏览其他商品或替代品，这样能使用户、商户增加成交的机率。</li></ul><h3 id="3-产品亮点功能体验"><a href="#3-产品亮点功能体验" class="headerlink" title="3. 产品亮点功能体验"></a>3. 产品亮点功能体验</h3><h4 id="3-1-优惠券管理"><a href="#3-1-优惠券管理" class="headerlink" title="3.1 优惠券管理"></a>3.1 优惠券管理</h4><ul><li>功能作用：帮助用户管理自己的优惠券，展示优惠券的使用情况和使用期限。<br>功能使用方法：进入个人中心的优惠券页面，可以找到用户当前未使用、已使用、已过期/失效的优惠券。在未使用页面，还会推荐其他好券，可以自行领取。</li><li>特殊情况测试：测试推荐好券的内容，一共约推荐了500张优惠券，当日刷新内容不变，排序似乎有变化。</li></ul><h4 id="3-2-砍价免费拿"><a href="#3-2-砍价免费拿" class="headerlink" title="3.2 砍价免费拿"></a>3.2 砍价免费拿</h4><ul><li>功能作用：帮助用户免费购买某商品，同时可在一定程度上提高品牌知名度。</li><li>功能使用方法：砍价免费拿页面后，点击免费拿，根据分享的操作提示一步一步的获得优惠金额，最终可以免费拿到优惠商品。</li><li>功能亮点：</li></ul><ol><li>从市场的角度来说：可以帮助品牌获得知名度，给用户免费使用的机会来获得好口碑，解决商家希望打开渠道的需求。</li><li>从拼多多平台的角度：用户通过不断分享来为平台拉到新用户，扩大了拼多多的用户规模和知名度，同时可以为拼多多攒下口碑，便宜也可以享受好货。</li><li>从用户角度：通过戳戳屏幕就可以拿到免费的东西是一件好事情，即使拿不到也不吃亏，可以解决用户想免费买买买的需求，满足他们想要免费的心理。</li></ol><ul><li>测试体验与思考：获得免费拿的方法很容易，只需要根据提示分享就可以了。比如一件2000元的商品，个人先点击免费拿后提示已成功砍价500元，再分享给2位好友可以优惠更多，金额随机，2位好友砍价完成后再分享到2个群可进一步获得优惠金额，就这样一直跟着提示操作直到砍到免费为止。过程耗时比较长，而且没找到几个有APP的小伙伴，于是没有成功完成。可能大多数一线城市的人都没有时间做这些操作，而且也没有那么多可以发广告的微信群。但对于农村或其他普通城镇的用户来说，他们亲友关系比较庞大而且相对紧密，有时间有互动，比较容易完成。当然不知道这样的活动拼多多自己的成本有多少？</li></ul><h4 id="3-3-内置小游戏"><a href="#3-3-内置小游戏" class="headerlink" title="3.3 内置小游戏"></a>3.3 内置小游戏</h4><ul><li>功能作用：让用户在游戏的过程中赚取购物优惠券。</li><li>功能使用方法：拼多多的小游戏比较多，果园、消除、答题等，在个人中心界面和首页都有入口。游戏的玩法和市面上的其他类似游戏方法相同，并且都有提示，上手比较容易。</li><li>功能亮点：这些小游戏本身并没有很新鲜，但同时放在一个APP里让用户用有趣的方式自己赚钱自己花，也能提高用户的成就感，增加他们的使用时长，从而刺激用户购物。另外对于年长的用户来说，本身操作手机对他们来说就不太方便，能够在一个APP里就能玩游戏还能赚东西，应该是很不错的体验了。</li><li>测试体验与思考：以多多果园为例，种一棵果树要浇水施肥，可浇水的时间间隔是30s一次，用户可以去做其他的任务再回来浇水（其他任务可以获得优惠券，或者是去拼单然后再拿到游戏道具）。这个细节让我觉得拼多多在不遗余力的留住用户，并刺激他们消费。<h2 id="三-竞品分析"><a href="#三-竞品分析" class="headerlink" title="三. 竞品分析"></a>三. 竞品分析</h2>以聚划算为竞品，来对比两个产品的优点和差异。</li></ul><table><thead><tr><th>产品</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>拼多多</td><td>砍价花样多易接受；<br>分享操作简便；<br>页面活动氛围浓厚，信息展示直接；</td><td>砍价的分享流程太长，容易把部分希望购买的用户挡在外面；<br>应用消息通知多，需要单独设置；</td></tr><tr><td>聚划算</td><td>有更多大牌参与半价优惠活动，不需要通过分享等操作砍价就能享受优惠，节省时间；<br>更多国际大牌店，更值得信赖；</td><td>奖励金的分享操作略复杂，需要保存图片之后才能分享，且识别图中二维码后还需要复制网址进入浏览器才能打开，但这里就不需要下载APP了；<br>拉新操作较少，激励体验感较弱；<br>折扣大多还是满减或多件打折，不够直接；</td></tr></tbody></table><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Aug 06 2019 19:05:40 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;拼多多是一款电商购物APP，它以社交为基础，能为用户提供价格优惠的购物体验。拼多多在2015年开始运营，2018年在美国上市，目前用户数量过亿。&lt;/p&gt;
    
    </summary>
    
      <category term="产品" scheme="https://zhangtaoy.cn/categories/%E4%BA%A7%E5%93%81/"/>
    
    
      <category term="皮牛" scheme="https://zhangtaoy.cn/tags/%E7%9A%AE%E7%89%9B/"/>
    
      <category term="拼多多" scheme="https://zhangtaoy.cn/tags/%E6%8B%BC%E5%A4%9A%E5%A4%9A/"/>
    
  </entry>
  
  <entry>
    <title>pymotw之socket</title>
    <link href="https://zhangtaoy.cn/2019/pymotw%E4%B9%8Bsocket/"/>
    <id>https://zhangtaoy.cn/2019/pymotw之socket/</id>
    <published>2019-07-03T06:50:42.656Z</published>
    <updated>2019-07-03T06:53:41.386Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Aug 01 2019 11:56:03 GMT+0800 (中国标准时间) --><p>Python中socket简介及使用–翻译自pymotw。</p><a id="more"></a><p>socket模块包装了使用BSD套接字接口在网络上通信的C语言接口。它包括套接字类，用于处理实际的数据通道，还包括网络相关任务的功能，例如将服务器的名称转换为地址，以及格式化要通过网络发送的数据。</p><p>#</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Thu Aug 01 2019 11:56:03 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;Python中socket简介及使用–翻译自pymotw。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://zhangtaoy.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Python" scheme="https://zhangtaoy.cn/tags/Python/"/>
    
      <category term="pymot" scheme="https://zhangtaoy.cn/tags/pymot/"/>
    
  </entry>
  
  <entry>
    <title>celery学习笔记</title>
    <link href="https://zhangtaoy.cn/2019/celery%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://zhangtaoy.cn/2019/celery学习笔记/</id>
    <published>2019-06-27T02:33:56.750Z</published>
    <updated>2019-06-27T02:38:12.882Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Aug 01 2019 11:56:03 GMT+0800 (中国标准时间) --><p>Python中最常用的任务队列，而且其他语言也可以用。</p><a id="more"></a><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Thu Aug 01 2019 11:56:03 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;Python中最常用的任务队列，而且其他语言也可以用。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://zhangtaoy.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Python" scheme="https://zhangtaoy.cn/tags/Python/"/>
    
      <category term="celery" scheme="https://zhangtaoy.cn/tags/celery/"/>
    
  </entry>
  
  <entry>
    <title>Python3.7升级实践</title>
    <link href="https://zhangtaoy.cn/2019/Python3.7%E5%8D%87%E7%BA%A7%E5%AE%9E%E8%B7%B5/"/>
    <id>https://zhangtaoy.cn/2019/Python3.7升级实践/</id>
    <published>2019-06-18T06:25:23.420Z</published>
    <updated>2019-06-18T07:59:15.338Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Aug 01 2019 11:56:03 GMT+0800 (中国标准时间) --><p>公司的后台运营系统计划目前是Python2.7 + tornado，计划升级为Python3.7，过程记录于此。</p><a id="more"></a><h1 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h1><p>Python2.7环境可以直接用CentOS自带的，但是Python3.7就需要自己装了，而且目前不可以直接yum装，那就只能从源码编译之。(以下操作均需root用户或sudo)</p><h3 id="安装编译环境"><a href="#安装编译环境" class="headerlink" title="安装编译环境"></a>安装编译环境</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel libffi-devel</span><br></pre></td></tr></table></figure><h3 id="下载Python3-7-2安装包"><a href="#下载Python3-7-2安装包" class="headerlink" title="下载Python3.7.2安装包"></a>下载Python3.7.2安装包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wget https://www.python.org/ftp/python/3.7.2/Python-3.7.2.tgz</span><br></pre></td></tr></table></figure><h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tar -xvJf  Python-3.7.2.tgz</span><br></pre></td></tr></table></figure><h3 id="编译三部曲"><a href="#编译三部曲" class="headerlink" title="编译三部曲"></a>编译三部曲</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> Python-3.7.2</span><br><span class="line">$ ./configure --prefix=/usr/<span class="built_in">local</span>/bin/python3.7</span><br><span class="line">$ make</span><br><span class="line">$ make install</span><br></pre></td></tr></table></figure><h3 id="创建软连接"><a href="#创建软连接" class="headerlink" title="创建软连接"></a>创建软连接</h3><p>因为python3.7安装到了/usr/local/bin/目录，那么在命令行直接输入python3.7命令是不能执行的，需要软连接至/usr/bin/目录<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ln -s /usr/<span class="built_in">local</span>/bin/python3.7/bin/python3.7 /usr/bin/python3.7</span><br><span class="line">$ ln -s /usr/<span class="built_in">local</span>/bin/python3.7/bin/pip3.7 /usr/bin/pip3.7</span><br></pre></td></tr></table></figure><p></p><h3 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h3><p>命令行输入python3.7，pip3.7测试，ok</p><h1 id="工程的Python2-gt-Python3"><a href="#工程的Python2-gt-Python3" class="headerlink" title="工程的Python2 -&gt; Python3"></a>工程的Python2 -&gt; Python3</h1><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>参考：<a href="https://www.zlovezl.cn/articles/instagram-pycon-2017/" target="_blank" rel="noopener">Ins的Python2-&gt;3分享</a></p><h3 id="Python2和Python3的主要区别"><a href="#Python2和Python3的主要区别" class="headerlink" title="Python2和Python3的主要区别"></a>Python2和Python3的主要区别</h3><h4 id="底层"><a href="#底层" class="headerlink" title="底层"></a>底层</h4><ul><li><p>Python2的文档编码和运行环境编码默认是ascii，必须要手动声明utf-8，如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 声明代码文本编码为utf-8</span></span><br><span class="line"><span class="comment"># coding=utf-8 </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 强制运行环境编码为utf-8</span></span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding(<span class="string">'utf8'</span>)</span><br></pre></td></tr></table></figure><p>Python3.6开始已经从运行环境到文档编码全是utf-8了，thank god</p></li><li>str bytes unicode encode decode<br>Python2的str bytes unicode encode decode傻傻分不清楚，Python3终于解决了这个死丢皮的问题（如果你是在Windows环境学习Python2的话。。。只能说坚持下来的都是和我一样的好汉）。Python3里，去掉了unicode类型，str==unicode， str.encode() -&gt; bytes bytes.decode() -&gt; str</li><li>除法<br>Python2里的除法：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Python2</span></span><br><span class="line"><span class="number">5</span> / <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span></span><br><span class="line"><span class="number">5.5</span> / <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2.75</span></span><br></pre></td></tr></table></figure></li></ul><p>即整数除以整数只能得到整数，要想得到小数结果必须被除数和除数之一为显式的小数，如5.0或float(5)<br>Python3的除法（个人觉得更符合直觉）：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Python3</span></span><br><span class="line"><span class="number">5</span> / <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2.5</span></span><br><span class="line"><span class="number">5.5</span> / <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2.75</span></span><br></pre></td></tr></table></figure><p></p><ul><li>生成器，参考<a href="https://python3-cookbook.readthedocs.io/zh_CN/latest/c04/p03_create_new_iteration_with_generators.html" target="_blank" rel="noopener">使用生成器创建新的迭代模式</a></li></ul><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><ul><li>最明显的：print关键字修改为print()函数，具体原因参考<a href="https://www.python.org/dev/peps/pep-3105/" target="_blank" rel="noopener">Python之父的pep-3105</a></li><li>exec 关键字 -&gt; exec()函数</li><li>相对导入更加明确，参考<a href="https://python3-cookbook.readthedocs.io/zh_CN/latest/c10/p03_import_submodules_by_relative_names.html" target="_blank" rel="noopener">使用相对路径名导入包中子模块</a></li><li>async 和 await, asyncio， 参考<a href="https://www.keakon.net/2017/06/28/%E7%94%A8Python3%E7%9A%84async/await%E5%81%9A%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B" target="_blank" rel="noopener">用 Python 3 的 async / await 做异步编程</a></li></ul><h4 id="包版本和函数的变化（遇到了就补充）"><a href="#包版本和函数的变化（遇到了就补充）" class="headerlink" title="包版本和函数的变化（遇到了就补充）"></a>包版本和函数的变化（遇到了就补充）</h4><ul><li>urllib2 -&gt; urllib，虽然我基本不用这个包。。。我觉得这个包的设计是Python的耻辱，无脑requests。</li></ul><h4 id="Tonado"><a href="#Tonado" class="headerlink" title="Tonado"></a>Tonado</h4><ul><li>tornado5.1及Python3.6以后，使用asyncio代替了自己的ioloop，之前的接口相当于封装了asyncio的函数，整体使用基本没有区别。最重要的是：兼容async，await，return的写法，不用再用恶心的 raise gen.Return() 了哈哈哈</li></ul><h3 id="开始迁移"><a href="#开始迁移" class="headerlink" title="开始迁移"></a>开始迁移</h3><h4 id="使用2to3"><a href="#使用2to3" class="headerlink" title="使用2to3"></a>使用<a href="https://docs.python.org/2/library/2to3.html" target="_blank" rel="noopener">2to3</a></h4><p>2to3本身是支持整个目录递归转换的，但是会遍历一些不必要的目录(.git, .idea, venv这些)，所以自己写了一个脚本，避开这些目录<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> pprint <span class="keyword">import</span> pprint</span><br><span class="line"></span><br><span class="line">py_files = []</span><br><span class="line"><span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(<span class="string">'your project root dir'</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'venv'</span> <span class="keyword">in</span> root <span class="keyword">or</span> <span class="string">'.git'</span> <span class="keyword">in</span> root:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        py_files.extend([os.path.join(root, file) <span class="keyword">for</span> file <span class="keyword">in</span> files <span class="keyword">if</span> file.endswith(<span class="string">'.py'</span>)])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(len(py_files))</span><br><span class="line">pprint(py_files)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'op_service_2to3_log'</span>, mode=<span class="string">'a+'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> py_files:</span><br><span class="line">        print(<span class="string">f'file: <span class="subst">&#123;file&#125;</span>'</span>)</span><br><span class="line">        print(<span class="string">f'file: <span class="subst">&#123;file&#125;</span>'</span>, file=f)</span><br><span class="line">        out_bytes = subprocess.check_output(<span class="string">f'2to3 <span class="subst">&#123;file&#125;</span> -w -n'</span>, stderr=subprocess.STDOUT, shell=<span class="literal">True</span>)</span><br><span class="line">        print(<span class="string">'    '</span> + out_bytes.decode(<span class="string">'utf-8'</span>))</span><br><span class="line">        print(<span class="string">'    '</span> + out_bytes.decode(<span class="string">'utf-8'</span>), file=f)</span><br></pre></td></tr></table></figure><p></p><p>跑完之后基本就是Python3的代码了，不过有一些转换2to3还是不支持，需要手动处理下 如 file() 转为 open()</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Thu Aug 01 2019 11:56:03 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;公司的后台运营系统计划目前是Python2.7 + tornado，计划升级为Python3.7，过程记录于此。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://zhangtaoy.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="CentOS" scheme="https://zhangtaoy.cn/tags/CentOS/"/>
    
      <category term="Python" scheme="https://zhangtaoy.cn/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序折腾记</title>
    <link href="https://zhangtaoy.cn/2019/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%8A%98%E8%85%BE%E8%AE%B0/"/>
    <id>https://zhangtaoy.cn/2019/微信小程序折腾记/</id>
    <published>2019-06-06T03:56:21.069Z</published>
    <updated>2019-06-10T07:28:34.717Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Aug 01 2019 11:56:03 GMT+0800 (中国标准时间) --><p>一个微信小程序项目，<a href="https://caddyserver.com/" target="_blank" rel="noopener">caddy</a> + <a href="https://www.tornadoweb.org/en/stable/" target="_blank" rel="noopener">tornado</a>, 放在ucloud的CentOS7.6上.</p><a id="more"></a><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Thu Aug 01 2019 11:56:03 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;一个微信小程序项目，&lt;a href=&quot;https://caddyserver.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;caddy&lt;/a&gt; + &lt;a href=&quot;https://www.tornadoweb.org/en/stable/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;tornado&lt;/a&gt;, 放在ucloud的CentOS7.6上.&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://zhangtaoy.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="CentOS" scheme="https://zhangtaoy.cn/tags/CentOS/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://zhangtaoy.cn/2019/hello-world/"/>
    <id>https://zhangtaoy.cn/2019/hello-world/</id>
    <published>2019-04-25T10:40:28.308Z</published>
    <updated>2019-05-21T12:57:14.493Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Aug 01 2019 11:56:03 GMT+0800 (中国标准时间) --><p>博客诞生记！本博客使用 <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a> + <a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">Next</a> + <a href="https://github.com" target="_blank" rel="noopener">Github Pages</a>花费10分钟搭建而成</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Thu Aug 01 2019 11:56:03 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;博客诞生记！本博客使用 &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt; + &lt;a href=&quot;http://theme-next.iissnan.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Next&lt;/a&gt; + &lt;a href=&quot;https://github.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Github Pages&lt;/a&gt;花费10分钟搭建而成&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://zhangtaoy.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="hexo" scheme="https://zhangtaoy.cn/tags/hexo/"/>
    
  </entry>
  
</feed>
